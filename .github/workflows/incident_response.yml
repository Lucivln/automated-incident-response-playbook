# .github/workflows/incident_response.yml
name: Automated Cloud Incident Response

# Workflow is triggered manually for testing (simulating a Wazuh webhook)
on:
  workflow_dispatch:
    inputs:
      target_host:
        description: 'Target EC2 instance name for containment'
        required: true
        default: 'Wazuh-Target'
      alert_severity:
        description: 'Severity level (e.g., 12 for critical file change)'
        required: true
        default: '12'

jobs:
  # Job 1: CONTAINMENT (Terraform) - Isolate the compromised host
  containment:
    name: 1. Host Containment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1 # Ensure this matches your region

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./aws/terraform

      - name: Apply Quarantine Security Group
        id: apply_quarantine
        # This command applies the containment.tf logic.
        # It creates the attachment resource, replacing the old Security Group with the Quarantine SG.
        run: |
          echo "Applying containment to ${{ github.event.inputs.target_host }}"
          terraform apply -auto-approve
        working-directory: ./aws/terraform

  # Job 2: REMEDIATION (Ansible) - Run forensics on the quarantined host
  remediation:
    name: 2. Forensic Remediation
    runs-on: ubuntu-latest
    needs: containment # Ensures containment completes before forensics
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python and Ansible
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Ansible Dependencies
        # Install Ansible and the Boto libraries for AWS dynamic inventory
        run: pip install ansible boto3 botocore

      - name: Run Forensic Playbook on Quarantined Host
        env:
          # Pass AWS keys as environment variables for Ansible's dynamic inventory
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "Running forensics on quarantined host: ${{ github.event.inputs.target_host }}"
          ansible-playbook -i ./aws/ansible/inventory/aws_ec2.yml \
            ./aws/ansible/playbooks/forensics.yml \
            --extra-vars "ansible_user=ubuntu target_host=${{ github.event.inputs.target_host }}" \
            --private-key ${{ secrets.SSH_PRIVATE_KEY }}
        # NOTE: You will need to create a GitHub Secret named SSH_PRIVATE_KEY 
        # with the content of your ~/.ssh/id_rsa file to enable SSH from GitHub Actions.
